{"version":3,"sources":["/home/project/cli/packages/cli/dist/index.mjs","../index.ts"],"names":["Command","fs","inquirer","program","inquirerFn","params","console","log","prompt","type","name","message","choices","default","then","answers","projectName","projectType","path","projectPath","existsSync","mkdirSync","recursive","writeFileSync","catch","error","isTtyError"],"mappings":"AAAA,WAAW;ACCX,SAASA,OAAA,QAAe,YAAA;AAExB,OAAOC,QAAuB,UAAA;AAC9B,OAAOC,cAAc,WAAA;AACrB,IAAMC,UAAU,IAAIH;AAoBb,SAASI,WAAWC,MAAA;IACzBC,QAAQC,GAAA,CAAIF,QAAQ;IACpBH,SACGM,MAAA,CAAO;QACN;YACEC,MAAM;YACNC,MAAM;YACNC,SAAS;QACX;QACA;YACEF,MAAM;YACNC,MAAM;YACNC,SAAS;YACTC,SAAS;gBAAC;gBAAW;gBAAS;aAAK;QACrC;QACA;YACEH,MAAM;YACNC,MAAM;YACNC,SAAS;YACTE,SAAS;QACX;KACD,EACAC,IAAA,CAAK,SAACC;QACL,IAAQC,cAAmCD,QAAnCC,aAAaC,cAAsBF,QAAtBE,aAAaC,OAASH,QAATG;QAClC,IAAMC,cAAc,GAAWH,OAARE,MAAI,KAAe,OAAXF;QAE/B,IAAI,CAACf,GAAGmB,UAAA,CAAWD,cAAc;YAC/BlB,GAAGoB,SAAA,CAAUF,aAAa;gBAAEG,WAAW;YAAK;YAC5ChB,QAAQC,GAAA,CACN,SAA4BU,OAAnBD,aAAW,SAA4BG,OAApBF,aAAW,UAAoB,OAAXE;YAIlD,OAAQF;gBACN,KAAK;oBAEHhB,GAAGsB,aAAA,CAAc,GAAc,OAAXJ,aAAW,cAAa;oBAC5C;gBACF,KAAK;oBAEHlB,GAAGsB,aAAA,CAAc,GAAc,OAAXJ,aAAW,YAAW;oBAC1C;gBACF,KAAK;oBAEHlB,GAAGsB,aAAA,CAAc,GAAc,OAAXJ,aAAW,aAAY;oBAC3C;gBACF;oBACEb,QAAQC,GAAA,CAAI;YAChB;QACF,OAAO;YACLD,QAAQC,GAAA,CAAI;QACd;IACF,GACCiB,KAAA,CAAM,SAACC;QACN,IAAIA,MAAMC,UAAA,EAAY;YACpBpB,QAAQC,GAAA,CAAI;QACd,OAAO;YACLD,QAAQC,GAAA,CAAI,6BAASkB;QACvB;IACF;AACJ;AD5BA,SACErB,UAAU,GACV","sourcesContent":["// index.ts\nimport { Command } from \"commander\";\nimport fs from \"node:fs\";\nimport inquirer from \"inquirer\";\nvar program = new Command();\nfunction inquirerFn(params) {\n  console.log(params, \"\\u547D\\u4EE4\\u884C\\u53C2\\u6570\");\n  inquirer.prompt([\n    {\n      type: \"input\",\n      name: \"projectName\",\n      message: \"\\u8BF7\\u8F93\\u5165\\u9879\\u76EE\\u540D\\u79F0:\"\n    },\n    {\n      type: \"list\",\n      name: \"projectType\",\n      message: \"\\u8BF7\\u9009\\u62E9\\u9879\\u76EE\\u7C7B\\u578B:\",\n      choices: [\"Node.js\", \"React\", \"Vue\"]\n    },\n    {\n      type: \"input\",\n      name: \"path\",\n      message: \"\\u8BF7\\u8F93\\u5165\\u9879\\u76EE\\u8DEF\\u5F84:\",\n      default: \"./\"\n    }\n  ]).then((answers) => {\n    const { projectName, projectType, path } = answers;\n    const projectPath = `${path}/${projectName}`;\n    if (!fs.existsSync(projectPath)) {\n      fs.mkdirSync(projectPath, { recursive: true });\n      console.log(\n        `\\u521B\\u5EFA\\u9879\\u76EE: ${projectName} \\u7C7B\\u578B: ${projectType} \\u5728\\u8DEF\\u5F84: ${projectPath}`\n      );\n      switch (projectType) {\n        case \"Node.js\":\n          fs.writeFileSync(`${projectPath}/index.js`, \"// Node.js \\u9879\\u76EE\\u5165\\u53E3\");\n          break;\n        case \"React\":\n          fs.writeFileSync(`${projectPath}/App.js`, \"// React \\u9879\\u76EE\\u5165\\u53E3\");\n          break;\n        case \"Vue\":\n          fs.writeFileSync(`${projectPath}/main.js`, \"// Vue \\u9879\\u76EE\\u5165\\u53E3\");\n          break;\n        default:\n          console.log(\"\\u672A\\u77E5\\u7684\\u9879\\u76EE\\u7C7B\\u578B\");\n      }\n    } else {\n      console.log(\"\\u9879\\u76EE\\u8DEF\\u5F84\\u5DF2\\u5B58\\u5728\\uFF0C\\u8BF7\\u9009\\u62E9\\u5176\\u4ED6\\u540D\\u79F0\\u6216\\u8DEF\\u5F84\\u3002\");\n    }\n  }).catch((error) => {\n    if (error.isTtyError) {\n      console.log(\"\\u65E0\\u6CD5\\u5728\\u5F53\\u524D\\u73AF\\u5883\\u4E2D\\u6E32\\u67D3\\u63D0\\u793A\");\n    } else {\n      console.log(\"\\u53D1\\u751F\\u9519\\u8BEF:\", error);\n    }\n  });\n}\nexport {\n  inquirerFn\n};\n","// CommonJS (.cjs)\nimport { Command } from \"commander\";\nimport path from \"node:path\";\nimport fs, { fsyncSync } from \"node:fs\";\nimport inquirer from \"inquirer\";\nconst program = new Command();\n\nfunction myParseInt(value: string) {\n  return parseInt(value, 10);\n}\n\nfunction increaseVerbosity(value: number) {\n  return value + 1;\n}\n\nfunction collect(value: any, previous: any[]) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value: string) {\n  return value.split(\",\");\n}\n\nconst projectMap = {};\n\nexport function inquirerFn(params: any) {\n  console.log(params, \"命令行参数\");\n  inquirer\n    .prompt([\n      {\n        type: \"input\",\n        name: \"projectName\",\n        message: \"请输入项目名称:\",\n      },\n      {\n        type: \"list\",\n        name: \"projectType\",\n        message: \"请选择项目类型:\",\n        choices: [\"Node.js\", \"React\", \"Vue\"],\n      },\n      {\n        type: \"input\",\n        name: \"path\",\n        message: \"请输入项目路径:\",\n        default: \"./\",\n      },\n    ])\n    .then((answers) => {\n      const { projectName, projectType, path } = answers;\n      const projectPath = `${path}/${projectName}`;\n\n      if (!fs.existsSync(projectPath)) {\n        fs.mkdirSync(projectPath, { recursive: true });\n        console.log(\n          `创建项目: ${projectName} 类型: ${projectType} 在路径: ${projectPath}`\n        );\n\n        // 根据项目类型创建不同的项目结构\n        switch (projectType) {\n          case \"Node.js\":\n            // 创建Node.js项目结构\n            fs.writeFileSync(`${projectPath}/index.js`, \"// Node.js 项目入口\");\n            break;\n          case \"React\":\n            // 创建React项目结构\n            fs.writeFileSync(`${projectPath}/App.js`, \"// React 项目入口\");\n            break;\n          case \"Vue\":\n            // 创建Vue项目结构\n            fs.writeFileSync(`${projectPath}/main.js`, \"// Vue 项目入口\");\n            break;\n          default:\n            console.log(\"未知的项目类型\");\n        }\n      } else {\n        console.log(\"项目路径已存在，请选择其他名称或路径。\");\n      }\n    })\n    .catch((error) => {\n      if (error.isTtyError) {\n        console.log(\"无法在当前环境中渲染提示\");\n      } else {\n        console.log(\"发生错误:\", error);\n      }\n    });\n}\n\n// function main() {\n//   program\n//     .option('-f, --float <number>', 'float argument', parseFloat)\n//     .option('-i, --integer <number>', 'integer argument', myParseInt)\n//     .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n//     .option('-c, --collect <value>', 'repeatable value', collect, [])\n//     .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n\n//   program.parse();\n\n//   const options = program.opts();\n//   console.log(options);\n//   if (options.float !== undefined) console.log(`float: ${options.float}`);\n//   if (options.integer !== undefined) console.log(`integer: ${options.integer}`);\n//   if (options.verbose > 0) console.log(`verbosity: ${options.verbose}`);\n//   if (options.collect.length > 0) console.log(options.collect);\n//   if (options.list !== undefined) console.log(options.list);\n\n// }\n"]}