{"version":3,"sources":["/home/project/cli/packages/cli/dist/index.mjs","../index.ts"],"names":["path","fs","inquirer","utils","chalk","ora","download","figlet","baseProject","log","console","projectMap","key","projectPath","join","inquirerFn","params","prompt","type","name","message","choices","default","then","answers","projectName","projectType","pathInput","existsSync","mkdirSync","recursive","copyFile","promisify","copyDir","promises","cp","findPaths","find","item","spinner","start","sourceDirReact","res","stop","red","catch","error","writeFileSync","sourceDirVue","isTtyError"],"mappings":"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","sourcesContent":["// index.ts\nimport path from \"node:path\";\nimport fs from \"node:fs\";\nimport inquirer from \"inquirer\";\nimport utils from \"node:util\";\nimport chalk from \"chalk\";\nimport ora from \"ora\";\nimport download from \"download-git-repo\";\nimport figlet from \"figlet\";\nvar baseProject = `../../projects`;\nvar log = console.log;\nvar projectMap = [\n  {\n    key: \"react\",\n    projectPath: path.join(baseProject, \"/rspack_demo\")\n  },\n  {\n    key: \"node\",\n    projectPath: path.join(baseProject, \"/node_demo\")\n  },\n  {\n    key: \"vue\",\n    projectPath: path.join(baseProject, \"/vite_demo\")\n  }\n];\nasync function inquirerFn(params) {\n  console.log(params, \"\\u547D\\u4EE4\\u884C\\u53C2\\u6570\");\n  inquirer.prompt([\n    {\n      type: \"input\",\n      name: \"projectName\",\n      message: \"\\u8BF7\\u8F93\\u5165\\u9879\\u76EE\\u540D\\u79F0:\"\n    },\n    {\n      type: \"list\",\n      name: \"projectType\",\n      message: \"\\u8BF7\\u9009\\u62E9\\u9879\\u76EE\\u7C7B\\u578B:\",\n      choices: [\"node\", \"react\", \"vue\"]\n    },\n    {\n      type: \"input\",\n      name: \"pathInput\",\n      message: \"\\u8BF7\\u8F93\\u5165\\u9879\\u76EE\\u8DEF\\u5F84:\",\n      default: \"./\"\n    }\n  ]).then((answers) => {\n    const { projectName, projectType, pathInput } = answers;\n    const projectPath = `${pathInput}/${projectName}`;\n    if (!fs.existsSync(projectPath)) {\n      fs.mkdirSync(projectPath, { recursive: true });\n      console.log(\n        `\\u521B\\u5EFA\\u9879\\u76EE: ${projectName} \\u7C7B\\u578B: ${projectType} \\u5728\\u8DEF\\u5F84: ${projectPath}`\n      );\n      const copyFile = utils.promisify(fs.copyFile);\n      const copyDir = fs.promises.cp;\n      const findPaths = (path2) => projectMap.find((item) => item.key === path2).projectPath;\n      const spinner = ora(\"Loading...\").start();\n      switch (projectType) {\n        case \"react\":\n          const sourceDirReact = findPaths(projectType);\n          console.log(sourceDirReact);\n          copyDir(sourceDirReact, `${projectPath}/`, { recursive: true }).then((res) => {\n            spinner.stop();\n            log(chalk.red(\"\\u9879\\u76EE\\u62F7\\u8D1D\\u6210\\u529F\"));\n          }).catch((error) => {\n            spinner.stop();\n            console.log(error);\n          });\n          break;\n        case \"node\":\n          fs.writeFileSync(`${projectPath}`, \"// React \\u9879\\u76EE\\u5165\\u53E3\");\n          break;\n        case \"vue\":\n          const sourceDirVue = findPaths(projectType);\n          console.log(sourceDirVue);\n          copyDir(sourceDirVue, `${projectPath}/`, { recursive: true }).then((res) => {\n            log(\"\\u9879\\u76EE\\u62F7\\u8D1D\\u6210\\u529F!\");\n          }).catch((error) => {\n            console.log(error);\n          });\n          break;\n        default:\n          console.log(\"\\u672A\\u77E5\\u7684\\u9879\\u76EE\\u7C7B\\u578B\");\n      }\n    } else {\n      console.log(\"\\u9879\\u76EE\\u8DEF\\u5F84\\u5DF2\\u5B58\\u5728\\uFF0C\\u8BF7\\u9009\\u62E9\\u5176\\u4ED6\\u540D\\u79F0\\u6216\\u8DEF\\u5F84\\u3002\");\n    }\n  }).catch((error) => {\n    if (error.isTtyError) {\n      console.log(\"\\u65E0\\u6CD5\\u5728\\u5F53\\u524D\\u73AF\\u5883\\u4E2D\\u6E32\\u67D3\\u63D0\\u793A\");\n    } else {\n      console.log(\"\\u53D1\\u751F\\u9519\\u8BEF:\", error);\n    }\n  });\n}\nexport {\n  inquirerFn\n};\n","import path from \"node:path\";\nimport fs from \"node:fs\";\nimport inquirer from \"inquirer\";\nimport utils from \"node:util\";\nimport chalk from \"chalk\";\nimport ora from \"ora\";\nimport download from \"download-git-repo\";\nimport figlet from 'figlet';\n\nconst baseProject = `../../projects`;\nconst log = console.log;\n\n\nconst downloadFun = function (url: any, project: any) {\n  const spinner = ora('Downloading source...').start();\n\n  download(url, project, {clone: true}, (err) => {\n    if (!err) {\n      spinner.succeed(chalk.green('Download successful!'));\n      console.log(chalk.yellow(figlet.textSync('Done!', { horizontalLayout: 'full' })));\n      console.log(chalk.blue(`You can start by running:\ncd ${project}\n${chalk.green('npm install')}\n${chalk.green('npm run dev')}`));\n    } else {\n      spinner.fail(chalk.red('Download failed'));\n      console.error(chalk.red(err));\n    }\n  });\n}\n\n\nconst projectMap = [\n  {\n    key: \"react\",\n    projectPath: path.join(baseProject, \"/rspack_demo\"),\n  },\n  {\n    key: \"node\",\n    projectPath: path.join(baseProject, \"/node_demo\"),\n  },\n  {\n    key: \"vue\",\n    projectPath: path.join(baseProject, \"/vite_demo\"),\n  },\n];\nexport async function inquirerFn(params: any) {\n  console.log(params, \"命令行参数\");\n  inquirer\n    .prompt([\n      {\n        type: \"input\",\n        name: \"projectName\",\n        message: \"请输入项目名称:\",\n      },\n      {\n        type: \"list\",\n        name: \"projectType\",\n        message: \"请选择项目类型:\",\n        choices: [\"node\", \"react\", \"vue\"],\n      },\n      {\n        type: \"input\",\n        name: \"pathInput\",\n        message: \"请输入项目路径:\",\n        default: \"./\",\n      },\n    ])\n    .then((answers) => {\n      const { projectName, projectType, pathInput } = answers;\n      const projectPath = `${pathInput}/${projectName}`;\n\n      if (!fs.existsSync(projectPath)) {\n        fs.mkdirSync(projectPath, { recursive: true });\n        console.log(\n          `创建项目: ${projectName} 类型: ${projectType} 在路径: ${projectPath}`\n        );\n\n        const copyFile = utils.promisify(fs.copyFile);\n        const copyDir = fs.promises.cp;\n\n        const findPaths = (path: \"react\" | \"node\" | \"vue\") =>\n          projectMap.find((item) => item.key === path).projectPath;\n        const spinner = ora(\"Loading...\").start();\n\n        // 根据项目类型创建不同的项目结构\n        switch (projectType) {\n          case \"react\":\n            const sourceDirReact = findPaths(projectType);\n            console.log(sourceDirReact);\n            copyDir(sourceDirReact, `${projectPath}/`, { recursive: true })\n              .then((res) => {\n                spinner.stop();\n                log(chalk.red(\"项目拷贝成功\"));\n              })\n              .catch((error) => {\n                spinner.stop();\n                // console.error(error);\n                console.log(error);\n              });\n            break;\n          case \"node\":\n            // 创建React项目结构\n            fs.writeFileSync(`${projectPath}`, \"// React 项目入口\");\n            break;\n          case \"vue\":\n            // 创建Vue项目结构\n            const sourceDirVue = findPaths(projectType);\n            console.log(sourceDirVue);\n            copyDir(sourceDirVue, `${projectPath}/`, { recursive: true })\n              .then((res) => {\n                log(\"项目拷贝成功!\");\n              })\n              .catch((error) => {\n                // console.error(error);\n                console.log(error);\n              });\n            break;\n          default:\n            console.log(\"未知的项目类型\");\n        }\n      } else {\n        console.log(\"项目路径已存在，请选择其他名称或路径。\");\n      }\n    })\n    .catch((error) => {\n      if (error.isTtyError) {\n        console.log(\"无法在当前环境中渲染提示\");\n      } else {\n        console.log(\"发生错误:\", error);\n      }\n    });\n}\n"]}