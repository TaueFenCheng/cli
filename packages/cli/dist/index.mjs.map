{"version":3,"sources":["/home/project/cli/packages/cli/dist/index.mjs","../index.ts"],"names":["path","fs","inquirer","utils","chalk","baseProject","projectMap","key","projectPath","join","log","console","inquirerFn","params","prompt","type","name","message","choices","default","then","answers","projectName","projectType","pathInput","existsSync","mkdirSync","recursive","copyFile","promisify","copyDir","promises","cp","findPaths","find","item","sourceDirReact","res","red","catch","error","writeFileSync","sourceDirVue","isTtyError"],"mappings":"AAAA,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAX,OAAOA,UAAU,YAAA;AACjB,OAAOC,QAAQ,UAAA;AACf,OAAOC,cAAc,WAAA;AACrB,OAAOC,WAAW,YAAA;AAElB,OAAOC,WAAW,QAAA;AAElB,IAAMC,cAAc;AAEpB,IAAMC,aAAa;IACjB;QACEC,KAAK;QACLC,aAAaR,KAAKS,IAAA,CAAKJ,aAAa;IACtC;IACA;QACEE,KAAK;QACLC,aAAaR,KAAKS,IAAA,CAAKJ,aAAa;IACtC;IACA;QACEE,KAAK;QACLC,aAAaR,KAAKS,IAAA,CAAKJ,aAAa;IACtC;CACF;AACA,IAAMK,MAAMC,QAAQD,GAAA;SACEE,WAAWC,MAAA;WAAXD;;SAAAA;IAAAA,cAAtB,oBAAA,SAAiCC,MAAA;;YAC/BF,QAAQD,GAAA,CAAIG,QAAQ;YACpBX,SACGY,MAAA;gBACC;oBACEC,MAAM;oBACNC,MAAM;oBACNC,SAAS;gBACX;gBACA;oBACEF,MAAM;oBACNC,MAAM;oBACNC,SAAS;oBACTC,OAAA;wBAAU;wBAAQ;wBAAS;;gBAC7B;gBACA;oBACEH,MAAM;oBACNC,MAAM;oBACNC,SAAS;oBACTE,SAAS;gBACX;eAEDC,IAAA,CAAK,SAACC;gBACL,IAAQC,cAAwCD,QAAxCC,aAAaC,cAA2BF,QAA3BE,aAAaC,YAAcH,QAAdG;gBAClC,IAAMhB,cAAc,GAAgBc,OAAbE,WAAS,KAAe,OAAXF;gBAEpC,IAAI,CAACrB,GAAGwB,UAAA,CAAWjB,cAAc;oBAC/BP,GAAGyB,SAAA,CAAUlB,aAAa;wBAAEmB,WAAW;oBAAK;oBAC5ChB,QAAQD,GAAA,CACN,SAA4Ba,OAAnBD,aAAW,SAA4Bd,OAApBe,aAAW,UAAoB,OAAXf;oBAGlD,IAAMoB,WAAWzB,MAAM0B,SAAA,CAAU5B,GAAG2B,QAAQ;oBAC5C,IAAME,UAAU7B,GAAG8B,QAAA,CAASC,EAAA;oBAE5B,IAAMC,YAAY,SAACjC;+BACjBM,WAAW4B,IAAA,CAAK,SAACC;mCAASA,KAAK5B,GAAA,KAAQP;2BAAMQ,WAAA;;oBAG/C,OAAQe;wBACN,KAAK;4BACH,IAAMa,iBAAiBH,UAAUV;4BACjCZ,QAAQD,GAAA,CAAI0B;4BACZN,QAAQM,gBAAgB,GAAc,OAAX5B,aAAW,MAAK;gCAAEmB,WAAW;4BAAK,GAC1DP,IAAA,CAAK,SAACiB;gCACL3B,IAAIN,MAAMkC,GAAA,CAAI;4BAChB,GACCC,KAAA,CAAM,SAACC;gCAEN7B,QAAQD,GAAA,CAAI8B;4BACd;4BACF;wBACF,KAAK;4BAEHvC,GAAGwC,aAAA,CAAc,GAAc,OAAXjC,cAAe;4BACnC;wBACF,KAAK;4BAEH,IAAMkC,eAAeT,UAAUV;4BAC/BZ,QAAQD,GAAA,CAAIgC;4BACZZ,QAAQY,cAAc,GAAc,OAAXlC,aAAW,MAAK;gCAAEmB,WAAW;4BAAK,GACxDP,IAAA,CAAK,SAACiB;gCACL3B,IAAI;4BACN,GACC6B,KAAA,CAAM,SAACC;gCAEN7B,QAAQD,GAAA,CAAI8B;4BACd;4BACF;wBACF;4BACE7B,QAAQD,GAAA,CAAI;oBAChB;gBACF,OAAO;oBACLC,QAAQD,GAAA,CAAI;gBACd;YACF,GACC6B,KAAA,CAAM,SAACC;gBACN,IAAIA,MAAMG,UAAA,EAAY;oBACpBhC,QAAQD,GAAA,CAAI;gBACd,OAAO;oBACLC,QAAQD,GAAA,CAAI,6BAAS8B;gBACvB;YACF;;;;;IACJ;WAnFsB5B;;ADiEtB,SACEA,UAAU,GACV","sourcesContent":["// index.ts\nimport path from \"node:path\";\nimport fs from \"node:fs\";\nimport inquirer from \"inquirer\";\nimport utils from \"node:util\";\nimport chalk from \"chalk\";\nvar baseProject = `../../projects`;\nvar projectMap = [\n  {\n    key: \"react\",\n    projectPath: path.join(baseProject, \"/rspack_demo\")\n  },\n  {\n    key: \"node\",\n    projectPath: path.join(baseProject, \"/node_demo\")\n  },\n  {\n    key: \"vue\",\n    projectPath: path.join(baseProject, \"/vite_demo\")\n  }\n];\nvar log = console.log;\nasync function inquirerFn(params) {\n  console.log(params, \"\\u547D\\u4EE4\\u884C\\u53C2\\u6570\");\n  inquirer.prompt([\n    {\n      type: \"input\",\n      name: \"projectName\",\n      message: \"\\u8BF7\\u8F93\\u5165\\u9879\\u76EE\\u540D\\u79F0:\"\n    },\n    {\n      type: \"list\",\n      name: \"projectType\",\n      message: \"\\u8BF7\\u9009\\u62E9\\u9879\\u76EE\\u7C7B\\u578B:\",\n      choices: [\"node\", \"react\", \"vue\"]\n    },\n    {\n      type: \"input\",\n      name: \"pathInput\",\n      message: \"\\u8BF7\\u8F93\\u5165\\u9879\\u76EE\\u8DEF\\u5F84:\",\n      default: \"./\"\n    }\n  ]).then((answers) => {\n    const { projectName, projectType, pathInput } = answers;\n    const projectPath = `${pathInput}/${projectName}`;\n    if (!fs.existsSync(projectPath)) {\n      fs.mkdirSync(projectPath, { recursive: true });\n      console.log(\n        `\\u521B\\u5EFA\\u9879\\u76EE: ${projectName} \\u7C7B\\u578B: ${projectType} \\u5728\\u8DEF\\u5F84: ${projectPath}`\n      );\n      const copyFile = utils.promisify(fs.copyFile);\n      const copyDir = fs.promises.cp;\n      const findPaths = (path2) => projectMap.find((item) => item.key === path2).projectPath;\n      switch (projectType) {\n        case \"react\":\n          const sourceDirReact = findPaths(projectType);\n          console.log(sourceDirReact);\n          copyDir(sourceDirReact, `${projectPath}/`, { recursive: true }).then((res) => {\n            log(chalk.red(\"\\u9879\\u76EE\\u62F7\\u8D1D\\u6210\\u529F\"));\n          }).catch((error) => {\n            console.log(error);\n          });\n          break;\n        case \"node\":\n          fs.writeFileSync(`${projectPath}`, \"// React \\u9879\\u76EE\\u5165\\u53E3\");\n          break;\n        case \"vue\":\n          const sourceDirVue = findPaths(projectType);\n          console.log(sourceDirVue);\n          copyDir(sourceDirVue, `${projectPath}/`, { recursive: true }).then((res) => {\n            log(\"\\u9879\\u76EE\\u62F7\\u8D1D\\u6210\\u529F!\");\n          }).catch((error) => {\n            console.log(error);\n          });\n          break;\n        default:\n          console.log(\"\\u672A\\u77E5\\u7684\\u9879\\u76EE\\u7C7B\\u578B\");\n      }\n    } else {\n      console.log(\"\\u9879\\u76EE\\u8DEF\\u5F84\\u5DF2\\u5B58\\u5728\\uFF0C\\u8BF7\\u9009\\u62E9\\u5176\\u4ED6\\u540D\\u79F0\\u6216\\u8DEF\\u5F84\\u3002\");\n    }\n  }).catch((error) => {\n    if (error.isTtyError) {\n      console.log(\"\\u65E0\\u6CD5\\u5728\\u5F53\\u524D\\u73AF\\u5883\\u4E2D\\u6E32\\u67D3\\u63D0\\u793A\");\n    } else {\n      console.log(\"\\u53D1\\u751F\\u9519\\u8BEF:\", error);\n    }\n  });\n}\nexport {\n  inquirerFn\n};\n","import path from \"node:path\";\nimport fs from \"node:fs\";\nimport inquirer from \"inquirer\";\nimport utils from \"node:util\";\n// const chalk = require('chalk')\nimport chalk from \"chalk\";\n\nconst baseProject = `../../projects`;\n\nconst projectMap = [\n  {\n    key: \"react\",\n    projectPath: path.join(baseProject, \"/rspack_demo\"),\n  },\n  {\n    key: \"node\",\n    projectPath: path.join(baseProject, \"/node_demo\"),\n  },\n  {\n    key: \"vue\",\n    projectPath: path.join(baseProject, \"/vite_demo\"),\n  },\n];\nconst log = console.log\nexport async function inquirerFn(params: any) {\n  console.log(params, \"命令行参数\");\n  inquirer\n    .prompt([\n      {\n        type: \"input\",\n        name: \"projectName\",\n        message: \"请输入项目名称:\",\n      },\n      {\n        type: \"list\",\n        name: \"projectType\",\n        message: \"请选择项目类型:\",\n        choices: [\"node\", \"react\", \"vue\"],\n      },\n      {\n        type: \"input\",\n        name: \"pathInput\",\n        message: \"请输入项目路径:\",\n        default: \"./\",\n      },\n    ])\n    .then((answers) => {\n      const { projectName, projectType, pathInput } = answers;\n      const projectPath = `${pathInput}/${projectName}`;\n\n      if (!fs.existsSync(projectPath)) {\n        fs.mkdirSync(projectPath, { recursive: true });\n        console.log(\n          `创建项目: ${projectName} 类型: ${projectType} 在路径: ${projectPath}`\n        );\n\n        const copyFile = utils.promisify(fs.copyFile);\n        const copyDir = fs.promises.cp;\n\n        const findPaths = (path: \"react\" | \"node\" | \"vue\") =>\n          projectMap.find((item) => item.key === path).projectPath;\n\n        // 根据项目类型创建不同的项目结构\n        switch (projectType) {\n          case \"react\":\n            const sourceDirReact = findPaths(projectType);\n            console.log(sourceDirReact);\n            copyDir(sourceDirReact, `${projectPath}/`, { recursive: true })\n              .then((res) => {\n                log(chalk.red('项目拷贝成功'));\n              })\n              .catch((error) => {\n                // console.error(error);\n                console.log(error);\n              });\n            break;\n          case \"node\":\n            // 创建React项目结构\n            fs.writeFileSync(`${projectPath}`, \"// React 项目入口\");\n            break;\n          case \"vue\":\n            // 创建Vue项目结构\n            const sourceDirVue = findPaths(projectType);\n            console.log(sourceDirVue);\n            copyDir(sourceDirVue, `${projectPath}/`, { recursive: true })\n              .then((res) => {\n                log(\"项目拷贝成功!\");\n              })\n              .catch((error) => {\n                // console.error(error);\n                console.log(error);\n              });\n            break;\n          default:\n            console.log(\"未知的项目类型\");\n        }\n      } else {\n        console.log(\"项目路径已存在，请选择其他名称或路径。\");\n      }\n    })\n    .catch((error) => {\n      if (error.isTtyError) {\n        console.log(\"无法在当前环境中渲染提示\");\n      } else {\n        console.log(\"发生错误:\", error);\n      }\n    });\n}\n"]}